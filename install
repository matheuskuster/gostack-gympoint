#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os


def populateDatabase(dbName):
    response = input(
        'Deseja criar o banco e as tabelas? [Y/n] ')
    if response == '' or response.lower() == 'y':
        os.chdir('./backend')
        os.system('yarn sequelize db:create')
        os.system('yarn sequelize db:migrate')
        os.system('yarn sequelize db:seed:all')
        os.chdir('../')

        print('Tabelas criadas e populadas!')


def installDependencies():
    response = input('Deseja instalar as dependências com yarn? [Y/n] ')

    if response == '' or response.lower() == 'y':
        os.chdir('./backend')
        os.system('yarn')
        os.chdir('../frontend')
        os.system('yarn')
        os.chdir('../mobile')
        os.system('yarn')
        os.chdir('../')
        print('Dependências instaladas!')


def dockerCreateContainers(dbUser, dbPass, redisPort):
    response = input(
        'Deseja criar os containers de POSTGRES e REDIS no docker? [y/N] ')

    if response.lower() == 'y':
        os.system(
            'docker run --name redis -p {}:{} -d -t redis:alpine'.format(redisPort, redisPort))
        os.system(
            'docker run --name {} -e POSTGRES_PASSWORD={} -p 5432:5432 -d postgres'.format(dbUser, dbPass))
        print('Containers criados')
    else:
        print('Passando para próxima etapa...')


def ask(question, default=''):
    response = ''
    while response == '' or default == '':
        response = str(input('[{}] {}: '.format(
            default if default != '' else 'SEM PADRÃO', question)))

        if response == '':
            if default == '':
                print('Esse campo não tem valor padrão, por favor digite algo.\n')
                continue
            return default

        return response


def createEnvOnBackend(appPort, appSecret, dbUser, dbPass, dbName, mailHost, mailUser, mailPass, redisPort, redisHost='127.0.0.1'):
    print('Criando o arquivo {}/backend/.env'.format(os.getcwd()))
    env = open('./backend/.env', 'w')
    env.write('APP_PORT={}\n'.format(appPort))
    env.write('APP_SECRET={}\n'.format(appSecret))
    env.write('DB_USER={}\n'.format(dbUser))
    env.write('DB_PASS={}\n'.format(dbPass))
    env.write('DB_NAME={}\n'.format(dbName))
    env.write('MAIL_HOST={}\n'.format(mailHost))
    env.write('MAIL_USER={}\n'.format(mailUser))
    env.write('MAIL_PASS={}\n'.format(mailPass))
    env.write('REDIS_HOST={}\n'.format(redisHost))
    env.write('REDIS_PORT={}\n'.format(redisPort))
    env.close()
    print('OK')


def initialize():
    print('Este script foi feito para facilitar a execução do GymPoint, caso tenha ainda tenha problemas, siga o processo manual. Obrigado :)')
    print('Serão feitas algumas perguntas, o valor padrão sempre aparecerá entre colchetes. Para mantê-lo, basta apertar ENTER.')
    print()


def main():
    initialize()
    print('1. Definir variáveis de ambiente do backend')
    appPort = ask('Digite a PORTA em que rodará o backend', '3333')
    print()
    appSecret = ask('Digite o SECRET de autenticação', 'gympoint')
    print()
    dbUser = ask('Digite o USUÁRIO do banco de dados', 'postgres')
    dbPass = ask('Digite a SENHA do banco de dados', 'docker')
    dbName = ask('Digite o NOME do banco de dados', 'gympoint')
    print()
    mailHost = ask('Digite o HOST do serviço de e-mail', 'smtp.mailtrap.io')
    mailUser = ask('Digite o USUÁRIO do serviço de e-mail')
    mailPass = ask('Digite a SENHA do serviço de e-mail')
    print()
    redisPort = ask('Digite a PORTA do Redis', '6379')

    createEnvOnBackend(appPort, appSecret, dbUser, dbPass,
                       dbName, mailHost, mailUser, mailPass, redisPort)

    print('\n2. Docker')
    dockerCreateContainers(dbUser, dbPass, redisPort)

    print('\n3. Dependências')
    installDependencies()

    print('\n4. Banco de dados')
    populateDatabase(dbName)

    print('\n5. Concluindo')
    print('Seu ambiente de desenvolvimento está instalado. Para executar o GymPoint, siga os passos seguintes em terminais diferentes:')
    print('- cd {}/backend'.format(os.getcwd()))
    print('- yarn queue')
    print('- yarn dev')
    print()

    print('- cd {}/frontend'.format(os.getcwd()))
    print('- yarn start')
    print()

    print('- cd {}/mobile'.format(os.getcwd()))
    print('- yarn start')
    print('- yarn android')


if __name__ == '__main__':
    main()
